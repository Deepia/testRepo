/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*
* Hide only visually, but have it available for screen readers: h5bp.com/v
*/
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/*
* Extends the .visuallyhidden class to allow the element to be focusable
* when navigated to via the keyboard: h5bp.com/p
*/
.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

html, body {
  font-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;
  font-size: 100%;
}

body {
  margin: 0;
  padding: 0;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

h1 {
  font-size: 24px;
  font-style: normal;
  font-variant: normal;
  font-weight: 500;
  line-height: 26.4px;
}

h3 {
  font-size: 14px;
  font-style: normal;
  font-variant: normal;
  font-weight: 500;
  line-height: 15.4px;
}

p {
  font-size: 16px;
  font-style: normal;
  font-variant: normal;
  font-weight: 400;
  line-height: 20px;
}

img, svg {
  max-width: 100%;
}

header,
nav,
section,
main {
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  clear: both;
}

th, td {
  border: 1px solid #dedede;
}

header {
  overflow: hidden;
  margin-top: 20px;
}

header .logo {
  float: left;
}

header .logo a {
  width: 200px;
  height: 31px;
  background-image: url("../img/hsLogo.png");
  text-indent: -999px;
  display: block;
}

header .welcomeMessage {
  float: right;
  font-size: 20px;
  font-weight: bold;
  line-height: 30px;
}

nav.navbar {
  margin-top: 20px;
  background-color: #444;
  padding: 0;
}

nav.navbar .menu {
  width: 100%;
}

nav.navbar li.level1 {
  width: 20%;
  font-size: 16px;
  padding: 0.2rem 0;
  text-transform: uppercase;
  text-align: center;
  border-right: 1px solid #fff;
}

nav.navbar .menu a,
nav.navbar .menu .is-active > a {
  color: #eee;
}

nav.navbar .menu a:hover,
nav.navbar .menu a:focus {
  color: #fff;
  font-weight: 600;
}

nav.navbar li.level1 > .menu {
  background-color: #606060;
  top: 0;
}

nav.navbar li.level1 li {
  border-bottom: 1px solid #fff;
}

nav.navbar li.level1 li:hover {
  background-color: #666;
}

nav.navbar .dropdown.menu > li.is-dropdown-submenu-parent > a::after {
  border-color: #ffffff transparent transparent;
  right: 10px;
}

nav.navbar .is-dropdown-submenu-parent.opens-right > a::after {
  border-color: transparent transparent transparent #ffffff;
}

nav.navbar .is-dropdown-submenu-parent.opens-left > a::after {
  border-color: transparent #ffffff transparent transparent;
}

nav.navbar .is-dropdown-submenu-parent .is-dropdown-submenu {
  top: 50%;
  background-color: #858585;
  font-size: 14px;
}

nav.navbar .opens-right .submenu .submenu .is-dropdown-submenu-item a {
  text-align: left;
}

nav.navbar .opens-left .submenu .submenu .is-dropdown-submenu-item a {
  text-align: right;
}

table tbody, table tfoot, table thead {
  border-right: 1px solid #dedede;
}

section.filterSection {
  margin-top: 20px;
  overflow: hidden;
}

section.filterSection span {
  display: inline-block;
  float: left;
  padding-right: 10px;
  line-height: 39px;
}

section.filterSection select, section.filterSection input[type=text] {
  width: 200px;
  float: left;
  margin-right: 10px;
}

section.filterSection input[type=checkbox] {
  margin-right: 6px;
}

section.filterSection label {
  line-height: 39px;
  display: inline-block;
  cursor: pointer;
}

section.dataCheck,
section.dataExport,
section.toolSummary,
section.filterManage {
  margin-top: 40px;
}

section.dataCheck .cipTitle, section.dataCheck .options,
section.dataExport .cipTitle,
section.dataExport .options,
section.toolSummary .cipTitle,
section.toolSummary .options,
section.filterManage .cipTitle,
section.filterManage .options {
  background-color: #54301A;
  color: #ffffff;
  line-height: 46px;
  padding: 0 7px;
  border-bottom: 1px solid #ffffff;
  overflow: hidden;
  clear: both;
}

section.dataCheck .options,
section.dataExport .options,
section.toolSummary .options,
section.filterManage .options {
  background-color: #808080;
}

section.dataCheck button.small,
section.dataExport button.small,
section.toolSummary button.small,
section.filterManage button.small {
  float: right;
  margin-top: 8px;
  height: 30px;
  margin-bottom: 0;
}

section.dataCheck label,
section.dataExport label,
section.toolSummary label,
section.filterManage label {
  display: inline-block;
  color: #ffffff;
  margin-right: 8px;
}

section.dataCheck input[type=text],
section.dataCheck input[type=file],
section.dataExport input[type=text],
section.dataExport input[type=file],
section.toolSummary input[type=text],
section.toolSummary input[type=file],
section.filterManage input[type=text],
section.filterManage input[type=file] {
  display: inline-block;
  width: 120px;
  margin-bottom: 0;
  height: 30px;
}

section.dataCheck input[type=file],
section.dataExport input[type=file],
section.toolSummary input[type=file],
section.filterManage input[type=file] {
  width: 200px;
  font-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;
}

section.dataCheck input[type=submit].button,
section.dataExport input[type=submit].button,
section.toolSummary input[type=submit].button,
section.filterManage input[type=submit].button {
  height: 22px;
  line-height: 22px;
  border-radius: 0;
  padding: 0 20px;
  margin-bottom: 0;
  font-size: 15px;
}

section.dataCheck .dividor,
section.dataExport .dividor,
section.toolSummary .dividor,
section.filterManage .dividor {
  margin-left: 5px;
  padding-left: 5px;
  border-left: 1px solid #ffffff;
}

button.button {
  font-size: 14px;
  text-transform: uppercase;
  height: 39px;
  min-width: 100px;
  font-weight: bold;
}

button.button.search {
  background-color: #eeeeee;
  border: 1px solid #bbbbbb;
  color: #333333;
}

button.button.search:hover {
  background-color: #dcdcdc;
}

button.button.submit,
button.button.submit:hover {
  color: #ffffff;
}

button.button.add {
  float: right;
}

input[type=checkbox],
input[type=radio] {
  vertical-align: middle;
  position: relative;
  bottom: 1px;
  margin: 0;
  margin-right: 2px;
}

main .button-group {
  margin-bottom: 0;
  width: 420px;
}

main .button-group .button.secondary {
  color: #efefef;
  border: 1px solid #cccccc;
  margin-right: 5px;
  margin-bottom: 0;
  color: #333333;
}

main .dataExport,
main .toolBrief {
  margin: 10px 0 20px;
}

main .dataExport .appTitle,
main .toolBrief .appTitle {
  background-color: #999999;
  color: #fff;
  padding: 10px 7px;
  overflow: hidden;
  font-weight: 600;
}

main .dataExport .appTitle a.addApp,
main .toolBrief .appTitle a.addApp {
  float: right;
  line-height: 30px;
  height: 30px;
  margin-bottom: 0;
  margin-top: 8px;
  color: #fff;
  text-transform: uppercase;
  font-size: 14px;
  border-left: 1px solid #fff;
  width: 100px;
  text-align: center;
}

main .dataExport .appTitle a.addApp:hover,
main .toolBrief .appTitle a.addApp:hover {
  color: #fff799;
}

nav .pagination {
  float: right;
  margin-top: 30px;
}

.sectionTitle {
  background-color: #808080;
  line-height: 36px;
  padding: 5px 10px;
  color: #fff;
  margin-top: 20px;
  font-size: 18px;
}

.sectionContainer {
  background-color: #efefef;
  border: 1px solid #606060;
  border-top: none;
  padding: 10px;
}

.sectionContainer .sectionContent {
  width: 80%;
  margin: 20px auto;
  overflow: hidden;
}

.sectionContainer label {
  margin-bottom: 5px;
}

.sectionContainer .fieldHalf {
  width: 50%;
  padding-right: 10px;
  float: left;
  margin-bottom: 10px;
}

.sectionContainer .field {
  border: 1px solid #bbbbbb;
  background-color: #ffffff;
  padding: 10px;
  border-radius: 4px;
  margin-right: 10px;
}

.sectionContainer .field label {
  display: inline-block;
  margin: 5px 15px 10px 0;
  cursor: pointer;
}

.sectionContainer .buttonSection {
  margin-top: 40px;
  text-align: center;
}

.sectionContainer .buttonSection .button {
  display: inline-block;
  margin: 0 10px 0 0;
}

main {
  overflow: hidden;
}

main .grids {
  width: 70%;
  float: left;
  overflow: hidden;
}

main .grids .grid {
  margin-right: 10px;
  margin-bottom: 10px;
  border-radius: 4px;
  width: calc(50% - 10px);
  float: left;
  height: 145px;
  background-color: #efefef;
  border: 1px solid #ccc;
  text-align: center;
}

main .grids .grid:hover {
  background-color: #eeeeee;
  box-shadow: inset 0 0 5px 0 rgba(0, 0, 0, 0.5);
}

main .grids .grid a {
  padding-top: 70px;
  background-size: 64px;
  background-repeat: no-repeat;
  background-position: center top;
  display: block;
  margin-top: 25px;
  color: #333;
  font-size: 20px;
  font-weight: 600;
  opacity: 0.75;
}

main .grids .grid a:hover {
  opacity: 1;
  text-decoration: none;
}

main .grids .grid a.cip {
  background-image: url("../img/cip.png");
}

main .grids .grid a.time {
  background-image: url("../img/timesheet.png");
}

main .grids .grid a.feedback {
  background-image: url("../img/feedback.png");
}

main .grids .grid a.theshelf {
  background-image: url("../img/theshelf.png");
}

main .grids .grid a.dept {
  background-image: url("../img/dept.png");
}

main .grids .grid a.onedrive {
  background-image: url("../img/onedrive.png");
}

main .poll {
  width: 30%;
  float: left;
  background-color: #efefef;
  border: 1px solid #ccc;
  min-height: 455px;
  border-radius: 4px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
